# Generated by Django 3.1.7 on 2021-03-18 15:10

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mailserveradmin.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MailDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('dkim_enabled', models.BooleanField(default=False)),
                ('dkim_selector', models.CharField(blank=True, max_length=50, null=True, validators=[mailserveradmin.models.dkim_validator])),
                ('dkim_private_key', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'mail_domains',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MailAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, validators=[mailserveradmin.models.username_validator])),
                ('destination', models.EmailField(max_length=254)),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aliases', to='mailserveradmin.maildomain')),
            ],
            options={
                'db_table': 'mail_alias',
                'ordering': ['name', 'domain__name'],
            },
        ),
        migrations.CreateModel(
            name='MailUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=255, validators=[mailserveradmin.models.username_validator])),
                ('password', models.CharField(help_text='encrypted password', max_length=255)),
                ('is_superuser', models.BooleanField(db_column='superadmin', default=False, help_text='admin for all domains')),
                ('is_admin', models.BooleanField(db_column='admin', default=False, help_text='admin for its domain')),
                ('is_active', models.BooleanField(db_column='enabled', default=True)),
                ('send_only', models.BooleanField(default=False)),
                ('quota', models.PositiveIntegerField(default=0, help_text='0 means no quota, size is in MB')),
                ('domain', models.ForeignKey(blank=True, help_text='Could be null for the superadmin', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='mailserveradmin.maildomain')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'mail_users',
                'ordering': ['name', 'domain__name'],
            },
            managers=[
                ('objects', mailserveradmin.models.MailUserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='mailalias',
            constraint=models.UniqueConstraint(fields=('name', 'domain', 'destination'), name='alias_idx'),
        ),
        migrations.AddConstraint(
            model_name='mailuser',
            constraint=models.UniqueConstraint(fields=('name', 'domain'), name='user_idx'),
        ),
    ]
